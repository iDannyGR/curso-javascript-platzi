{"dependencies":[{"name":"C:\\xampp\\htdocs\\curso-javascript-platzi\\javascript-profesional\\package.json","includedInParent":true,"mtime":1635536718828}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Proxy</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>abre la consola</em></p>\r\n\r\n<script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\r\n<script>\r\n      // Proxy es parecido a getters y setters\r\n      // Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\r\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\r\n\r\n      // Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\r\n      // Si la propiedad existe, la regresamos\r\n      // Si no existe, entonces sugerimos una que pueda funcionar\r\n\r\n      // Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\r\n      // Ejemplos de levenshtein distance (usa window.Levenshtein)\r\n        const target ={\r\n            red: 'rojo',\r\n            green: 'verde',\r\n            blue: 'azul'\r\n        }\r\n        const handler = {\r\n            get(obj, prop){\r\n                if(prop in obj){\r\n                      return obj[prop];\r\n                }\r\n                const suggestion = Object.keys(obj).find(key =>{\r\n                   return Levenshtein.get(key, prop) <= 3\r\n                });\r\n                if (suggestion){\r\n                    console.log(`\r\n                    ${prop} no se encontro, quisiste deicir ${suggestion}?`\r\n                    );\r\n                }\r\n                return obj[prop];\r\n            }, \r\n        };\r\n      const p= new Proxy(target, handler)\r\n\r\n</script>\r\n</body>\r\n</html>"},"hash":"107f42e0290e9477efe0c5cc28003437","cacheData":{},"id":10}