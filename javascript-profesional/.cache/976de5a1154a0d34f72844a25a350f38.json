{"dependencies":[{"name":"C:\\xampp\\htdocs\\curso-javascript-platzi\\javascript-profesional\\package.json","includedInParent":true,"mtime":1635536718828}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Generators</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>abre la consola</em></p>\r\n    <script>\r\n        //los generadores son funciones de las que sepude salir y volver a entrar\r\n        //su contexto(asociacion de variables) sera conservada entre las reentradas\r\n        //cada vez que llamenos next, la ejecucion del generador va a continuar hasta el proximo yield\r\n        function* simpleGenerator(){\r\n                console.log('GENERATOR START');\r\n                yield 1;\r\n                yield 2;\r\n                yield 3;\r\n                console.log('GENERATOR END');\r\n        }\r\n\r\n     //podemos hacer generadores infinitos\r\n     function* idMaker(){\r\n         let id = 1;\r\n         while(true){\r\n             yield id\r\n             id += 1;\r\n         }\r\n     }\r\n\r\n     //cuando llamaos next tambien podemos pasarle valores a que la funcion recibe\r\n     function* idMakerWhithReset(){\r\n         let id = 1;\r\n         while(true){\r\n            reset = yield id;\r\n            if(reset){\r\n                id=1;\r\n            }else{\r\n             id += 1;}\r\n         }\r\n     }\r\n\r\n     //secuencia de fibonacci \r\n     function* fibonacci(){\r\n         let a = 1;\r\n         let b =1;\r\n         while(true){\r\n             const nextNumber = a + b\r\n             a = b;\r\n             b = nextNumber;\r\n             yield nextNumber;\r\n         }\r\n     }\r\n    </script>\r\n</body>\r\n</html>"},"hash":"322f6e954dd4cde2b22a146ea1dcf6ae","cacheData":{},"id":6}